#include <cassert>
#include <iostream>
#include <memory>
#include <tuple>
#include <string>

class Apparatus {
private:
    std::string name;
public:
    Apparatus(const std::string& n) : name(n) {}
    std::string getName() const { return name; }
};

class Stream {
private:
    double concentration;
    double volume;
    std::shared_ptr<Apparatus> fromApparatus;
    std::shared_ptr<Apparatus> toApparatus;
public:
    Stream(double conc, double vol) : concentration(conc), volume(vol) {}

    double getConcentration() const { return concentration; }
    void setConcentration(double conc) { concentration = conc; }

    double getVolume() const { return volume; }
    void setVolume(double vol) { volume = vol; }

    std::shared_ptr<Apparatus> getFromApparatus() const { return fromApparatus; }
    void setFromApparatus(std::shared_ptr<Apparatus> app) { fromApparatus = app; }

    std::shared_ptr<Apparatus> getToApparatus() const { return toApparatus; }
    void setToApparatus(std::shared_ptr<Apparatus> app) { toApparatus = app; }
};

std::tuple<Stream, Stream> complexReactor(const Stream& input1, const Stream& input2,
                                         std::shared_ptr<Apparatus> reactorApparatus) {
    double totalVolume = input1.getVolume() + input2.getVolume();
    double mixedConcentration = (input1.getConcentration() * input1.getVolume() + input2.getConcentration() * input2.getVolume()) / totalVolume;
    double reactedConcentration = mixedConcentration * 0.7;

    Stream output1(reactedConcentration, totalVolume * 0.5);
    Stream output2(reactedConcentration, totalVolume * 0.5);

    output1.setFromApparatus(reactorApparatus);
    output2.setFromApparatus(reactorApparatus);

    output1.setToApparatus(nullptr);
    output2.setToApparatus(nullptr);

    return std::make_tuple(output1, output2);
}

// Тесты
void runTests() {
    // Создаем аппараты
    auto app1 = std::make_shared<Apparatus>("Apparatus 1");
    auto app2 = std::make_shared<Apparatus>("Apparatus 2");
    auto reactor = std::make_shared<Apparatus>("Reactor");

    // Тест 1: Проверка правильности установки концентрации и объема после реакции
    Stream input1(3.0, 6.0);
    Stream input2(7.0, 6.0);
    input1.setFromApparatus(app1);
    input1.setToApparatus(reactor);
    input2.setFromApparatus(app2);
    input2.setToApparatus(reactor);

    auto [out1, out2] = complexReactor(input1, input2, reactor);
    double expectedConc = ((3.0*6.0 + 7.0*6.0) / 12.0) * 0.7;
    assert(abs(out1.getConcentration() - expectedConc) < 1e-9);
    assert(abs(out2.getConcentration() - expectedConc) < 1e-9);
    assert(out1.getVolume() == 6.0);
    assert(out2.getVolume() == 6.0);

    // Тест 2: Проверка установки аппаратов источника и приемника
    assert(out1.getFromApparatus() == reactor);
    assert(out2.getFromApparatus() == reactor);
    assert(out1.getToApparatus() == nullptr);
    assert(out2.getToApparatus() == nullptr);

    // Тест 3: Проверка геттеров и сеттеров для концентрации и объема
    Stream testStream(5.0, 10.0);
    testStream.setConcentration(8.0);
    testStream.setVolume(15.0);
    assert(testStream.getConcentration() == 8.0);
    assert(testStream.getVolume() == 15.0);

    // Тест 4: Проверка геттеров и сеттеров для аппаратов
    testStream.setFromApparatus(app1);
    testStream.setToApparatus(app2);
    assert(testStream.getFromApparatus()->getName() == "Apparatus 1");
    assert(testStream.getToApparatus()->getName() == "Apparatus 2");

    // Тест 5: Проверка работы с нулевыми указателями аппаратов
    testStream.setFromApparatus(nullptr);
    testStream.setToApparatus(nullptr);
    assert(testStream.getFromApparatus() == nullptr);
    assert(testStream.getToApparatus() == nullptr);

    std::cout << "Все тесты пройдены успешно!" << std::endl;
}

int main() {
    runTests();
    return 0;
}
